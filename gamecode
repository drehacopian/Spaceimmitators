import pygame
from pygame import mixer
from pygame.locals import *
import random
import time

pygame.init()
pygame.mixer.pre_init(44100, -16, 2, 512)
mixer.init()

time_now = 0
func_start = 0

alien_cooldown = 1000  # ms
alien_cooldown2 = 50
last_alien_shot = pygame.time.get_ticks()

clock = pygame.time.Clock()
fps = 60

red = (255, 0, 0)
green = (0, 255, 0)
white = (255, 255, 255)
screen_width = 600
screen_height = 800


def draw_bg():
    win.blit(bg, (0, 0))


win = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Space Imitators")

# define fonts
font30 = pygame.font.SysFont
FONT_NAME = 'arial'

# load Sounds
explosion_fx = pygame.mixer.Sound("explosion.wav")
explosion_fx.set_volume(0.05)

explosion2_fx = pygame.mixer.Sound("explosion2.wav")
explosion2_fx.set_volume(0.25)

laser_fx = pygame.mixer.Sound("laser.wav")
laser_fx.set_volume(0.03)

bg = pygame.image.load("bg.png")

background_size = bg.get_size()
background_rect = bg.get_rect()
win = pygame.display.set_mode(background_size)
w, h = background_size
x = 0
y = 0

x1 = 0
y1 = -h


# define function for creatin text
def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    win.blit(img, (x, y))

def draw_text2(text, size, color, x, y):
    font_name = pygame.font.match_font(FONT_NAME)
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    win.blit(text_surface, text_rect)

class Spaceship(pygame.sprite.Sprite):
    def __init__(self, x, y, health):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("spaceship.png")
        self.x = x
        self.y = y
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.health_start = health
        self.health_remaining = health
        self.last_shot = pygame.time.get_ticks()
        self.clone = 1
        self.wave = 1

    def update(self):
        Speed = 8
        key = pygame.key.get_pressed()
        # cool down veriable
        cooldown = 100

        # get Keys press
        if key[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= 8
        if key[pygame.K_RIGHT] and self.rect.left < 520:
            self.rect.x += 8

        if key[pygame.K_v] and self.rect.left < 520:
            spot = self.rect.center[0]
            same = self.health_remaining
            jump = spot + 60
            spaceship = Spaceship(jump, screen_height - 100, same)
            self.rect.center = [jump, screen_height - 100]

        if key[pygame.K_c] and self.rect.left > 10:
            spot = self.rect.center[0]
            same = self.health_remaining
            jump = spot - 60
            spaceship = Spaceship(jump, screen_height - 100, same)
            self.rect.center = [jump, screen_height - 100]

        # health bars
        if self.health_remaining >= 1:
            pygame.draw.rect(win, red, (self.rect.x, (self.rect.bottom + 10), self.rect.width, 15))
        if self.health_remaining > 0:
            pygame.draw.rect(win, green, (
            self.rect.x, (self.rect.bottom + 10), int(self.rect.width * (self.health_remaining / self.health_start)),
            15))
        elif self.health_remaining <= 0:
            self.kill()
            explosion = Explosion(self.rect.centerx, self.rect.centery, 3)
            explosion_group.add(explosion)

            # if clock - time_now <= 2 * cooldown:

        # update mask
        self.mask = pygame.mask.from_surface(self.image)

        # shoot
        if key[pygame.K_SPACE] and time_now - self.last_shot > cooldown:
            laser_fx.play()
            bullet = Bullets(self.rect.centerx, self.rect.top)
            bullet_group.add(bullet)
            self.last_shot = time_now

class Boss(pygame.sprite.Sprite):
    def __init__(self, x, y, health):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("boss.png")
        self.image2 = pygame.image.load("lowhealth.png")
        self.x = x
        self.y = y
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.health_start = health
        self.health_remaining = health
        self.last_shot = pygame.time.get_ticks()
        self.move_counter = 0
        self.move_direction = 1  # change back t0 1

    def update(self):
        Speed = 8
        # cool down veriable
        cooldown = 100

        # health bars
        if self.health_remaining >= 1:
            pygame.draw.rect(win, red, (self.rect.x, (self.rect.bottom - 100), self.rect.width, 15))
        if self.health_remaining > 0:
            pygame.draw.rect(win, green, (self.rect.x, (self.rect.bottom - 100), int(self.rect.width * (self.health_remaining / self.health_start)), 15))
        elif self.health_remaining <= 0:
            explosion = Explosion(self.rect.centerx, self.rect.centery, 3)
            explosion_group.add(explosion)
            boss_group.remove(boss)

        #Shield
        shield.rect.x = self.rect.center[0] - 87
        shield.rect.y = self.rect.center[1] - 40

        # update mask
        self.mask = pygame.mask.from_surface(self.image)

        # move
        if self.rect.center[1] <= 100:  # and boss_final == True:
            self.rect.y += 5
        elif self.rect.center[1] >= 100 and self.health_remaining > 6:
            self.rect.x += self.move_direction * 8  # change number for speed and
            self.move_counter += 1
            if abs(self.move_counter) > 30:  # and this for side parameters when speed is changed
                self.move_direction *= -1
                self.move_counter *= self.move_direction
        if self.rect.center[1] < 400 and self.health_remaining <= 6:  # movement on half health, move closer to player
            self.rect.y += 5

        elif self.rect.center[1] == 400 and self.health_remaining <= 6:
            self.rect.x += self.move_direction * 8  # change number for speed and
            self.move_counter += 1
            if abs(self.move_counter) > 37:  # and this for side parameters when speed is changed
                self.move_direction *= -1
                self.move_counter *= self.move_direction
        # shoot
        # if :
        # laser_fx.play()
        # bullet = Bullets(self.rect.centerx, self.rect.bottom)
        # bullet_group.add(bullet)
        # self.last_shot = time_now

class Bullets(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("bullet.png")
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]

    def update(self):
        self.rect.y -= 5
        if self.rect.bottom < 0:
            self.kill()
        if pygame.sprite.spritecollide(self, alien_group, True):
            self.kill()
            explosion_fx.play()
            explosion = Explosion(self.rect.centerx, self.rect.centery, 2)
            explosion_group.add(explosion)
        elif pygame.sprite.spritecollide(self, boss_group, True):
            self.kill()
            explosion_fx.play()
            explosion = Explosion(self.rect.centerx, self.rect.centery, 2)
            explosion_group.add(explosion)
            boss.health_remaining -= 1 / 2
        elif pygame.sprite.spritecollide(self, shield_group, False):
            self.kill()
            explosion_fx.play()
            explosion = Explosion(self.rect.centerx, self.rect.centery, 2)
            explosion_group.add(explosion)
        elif pygame.sprite.spritecollide(self, boss_bullet_group, False):
            self.kill()
            explosion_fx.play()
            explosion = Explosion(self.rect.centerx, self.rect.centery, 2)
            explosion_group.add(explosion)


class Shield(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("shield.png")
        self.rect = self.image.get_rect()
        self.x = x
        self.y = y
        self.rect.center = [x, y]

    def update(self):
        # update mask
        self.mask = pygame.mask.from_surface(self.image)

class Explosion(pygame.sprite.Sprite):
    def __init__(self, x, y, size):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        for num in range(1, 6):
            img = pygame.image.load(f"exp{num}.png")
            if size == 1:
                img = pygame.transform.scale(img, (20, 20))
            if size == 2:
                img = pygame.transform.scale(img, (40, 40))
            if size == 3:
                img = pygame.transform.scale(img, (160, 160))
            # add image to the list
            self.images.append(img)

        self.index = 0
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.counter = 0

    def update(self):
        explosion_speed = 3
        # update explosion animation
        self.counter += 1

        if self.counter >= explosion_speed and self.index < len(self.images) - 1:
            self.counter = 0
            self.index += 1
            self.image = self.images[self.index]

        # if the animation is complete, delete explosion
        if self.index >= len(self.images) - 1 and self.counter >= explosion_speed:
            self.kill()

class Boss_Bullets(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load("alien_bullet.png")
        self.rect = self.image.get_rect()
        self.rect.center = [x,y]

    def update(self):
        self.rect.y += 10
        if self.rect.top > screen_height:
            self.kill()
        if pygame.sprite.spritecollide(self, spaceship_group, False, pygame.sprite.collide_mask):
            self.kill()
            explosion2_fx.play
            spaceship.health_remaining  -= 1
            explosion = Explosion(self.rect.centerx, self.rect.centery, 2)
            explosion_group.add(explosion)
        #elif pygame.sprite.spritecollide(self, spaceship2_group, False, pygame.sprite.collide_mask):
            #self.kill()
            #explosion2_fx.play
            #spaceship2.health_remaining  -= 1
            #explosion = Explosion(self.rect.centerx, self.rect.centery, 2)
            #explosion_group.add(explosion)

spaceship = Spaceship(int(screen_width / 2), screen_height - 100, 3)
boss = Boss(int(screen_width / 2), screen_height - 1200, 12)
shield = Shield(boss.rect.center[0] - 85, boss.rect.center[1] - 40)

spaceship_group = pygame.sprite.Group()
bullet_group = pygame.sprite.Group()
explosion_group = pygame.sprite.Group()
alien_group = pygame.sprite.Group()
boss_group = pygame.sprite.Group()
shield_group = pygame.sprite.Group()
boss_bullet_group = pygame.sprite.Group()

spaceship_group.add(spaceship)
shield_group.add(shield)


def func_start():
    func_start = pygame.time.get_ticks()


# start screen
def show_start_screen():
    draw_bg()
    draw_text2("SPACE IMITATORS!!!", 48, green, screen_width / 2, screen_height / 4)
    draw_text2("<  or  > to move, Spacebar to fire", 22, green, screen_width / 2, screen_height / 2)
    draw_text2("Press Any Key to play", 22, green, screen_width / 2, screen_height * 3 / 4)
    pygame.display.flip()
    wait_for_key()
    pygame.display.update()


# loop For Start Screen
def wait_for_key():
    waiting = True
    while waiting:
        clock.tick(fps)
        for event in pygame.event.get():

            if event.type == pygame.QUIT:
                waiting = False
                run = False
            if event.type == pygame.KEYUP:
                waiting = False


show_start_screen()
run = True
while run:
    clock.tick(fps)
    draw_bg()
    key = pygame.key.get_pressed()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    # shoot for boss
    if time_now - last_alien_shot / (6 / 5) > alien_cooldown and len(boss_bullet_group) < 4 and len(alien_group) == 0 and boss.rect.center[1] >= 100 and boss.rect.center[1] <= 150 and boss.health_remaining > 0:
        attacking_alien = boss_group
        boss_bullet = Boss_Bullets(boss.rect.centerx, boss.rect.bottom)
        boss_bullet_group.add(boss_bullet)
        last_alien_shot = time_now

    # create random alien bullets
    # record current time
    time_now = pygame.time.get_ticks()

    y1 += 3  # both control the speed of the screen moving
    y += 3  # both control the speed of the screen moving
    win.blit(bg, (x, y))
    win.blit(bg, (x1, y1))
    if y > h:
        y = -h
    if y1 > h:
        y1 = -h

    spaceship.update()
    bullet_group.update()
    alien_group.update()
    explosion_group.update()
    boss.update()
    shield.update()
    boss_group.add(boss)
    boss_bullet_group.update()

    pygame.display.flip()
    spaceship_group.draw(win)
    bullet_group.draw(win)
    alien_group.draw(win)
    shield_group.draw(win)
    explosion_group.draw(win)
    boss_group.draw(win)
    boss_bullet_group.draw(win)
    pygame.display.update()

pygame.quit()
